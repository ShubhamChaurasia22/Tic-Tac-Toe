{"version":3,"sources":["Components/Icon.js","App.js","index.js"],"names":["Icon","choice","className","tictacArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","index","toast","type","Container","position","Row","Col","md","Button","onClick","map","value","Card","CardBody","ReactDOM","render","document","getElementById"],"mappings":"8LAceA,EAXF,SAAC,GACN,OADmB,EAAZC,QAEH,IAAK,QACD,OAAM,cAAC,IAAD,CAASC,UAAU,SAC7B,IAAK,SACD,OAAM,cAAC,IAAD,CAAaA,UAAU,SACjC,QACI,MAAO,K,gECIjBC,G,YAAc,IAAIC,MAAM,GAAGC,KAAK,KA2FvBC,EAzFH,WACR,MAA4BC,oBAAS,GAArC,mBAAKC,EAAL,KAAcC,EAAd,KACA,EAAkCF,mBAAS,IAA3C,mBAAKG,EAAL,KAAiBC,EAAjB,KAkCMC,EAAW,SAACC,GACd,OAAGH,EACQI,YAAM,4BAA6B,CAACC,KAAK,YAE7B,IAApBZ,EAAYU,GAKwB,CAACE,KAAK,UAJzCZ,EAAYU,GAASL,EAAU,QAAU,SACzCC,GAAYD,QAhCbL,EAAY,IAAIA,EAAY,IAAIA,EAAY,IAAIA,EAAY,IAAsB,IAAhBA,EAAY,GAC7EQ,EAAcR,EAAY,GAAG,YAEzBA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IAAKA,EAAY,IAAsB,IAAhBA,EAAY,GACtFQ,EAAcR,EAAY,GAAG,YAEzBA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IAAKA,EAAY,IAAsB,IAAhBA,EAAY,GACtFQ,EAAcR,EAAY,GAAG,YAEzBA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IAAKA,EAAY,IAAMA,EAAY,GACtFQ,EAAcR,EAAY,GAAG,YAEzBA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IAAKA,EAAY,IAAMA,EAAY,GACtFQ,EAAcR,EAAY,GAAG,YAEzBA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IAAKA,EAAY,IAAMA,EAAY,GACtFQ,EAAcR,EAAY,GAAG,YAEzBA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IAAKA,EAAY,IAAMA,EAAY,GACtFQ,EAAcR,EAAY,GAAG,YAEzBA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IAAKA,EAAY,IAAMA,EAAY,IACtFQ,EAAcR,EAAY,GAAG,eAkBrC,OACI,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACI,cAAC,IAAD,CAAgBe,SAAS,kBACzB,eAACC,EAAA,EAAD,WACI,qBAAKhB,UAAU,OAAf,yBACA,eAACiB,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UAGQQ,EACI,gCACA,oBAAIR,UAAU,cAAd,SACKQ,IAEL,cAACW,EAAA,EAAD,CAAQC,QA3DhB,WACZb,GAAW,GACXE,EAAc,IACdR,EAAYE,KAAK,KAwD+BH,UAAU,SAAtC,2BAGA,6BACKM,EAAQ,kBAAkB,oBAKvC,qBAAKN,UAAU,OAAf,SACKC,EAAYoB,KAAI,SAACC,EAAMX,GAAP,OACb,cAACY,EAAA,EAAD,CAAMH,QAAS,kBAAIV,EAAWC,IAA9B,SACI,cAACa,EAAA,EAAD,CAAUxB,UAAU,MAApB,SACI,cAAC,EAAD,CAAMD,OAAQE,EAAYU,wBCtF9Dc,IAASC,OAAQ,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.3f87b995.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FaTimes,FaRegCircle} from \"react-icons/fa\";\r\n\r\nconst Icon = ({choice}) => {\r\n        switch(choice){\r\n            case \"cross\":\r\n                return<FaTimes className=\"icon\"/>;\r\n            case \"circle\":\r\n                return<FaRegCircle className=\"icon\" />;\r\n            default:\r\n                return \"\";\r\n        }\r\n}\r\n\r\nexport default Icon","import React, {useState} from 'react'\r\nimport Icon from \"./Components/Icon\"\r\n// impot react-toastify\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n// import reactstrap\r\nimport {Button, Container, Card, CardBody, Row, Col} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport \"./style.css\"\r\n\r\n// tic-tac-toe Array creating\r\n\r\nconst tictacArray = new Array(9).fill(\"\")\r\n\r\nconst App = () => {\r\n    let [isCross, setIsCross] = useState(true)\r\n    let [winMessage, setWinMessage] = useState(\"\")\r\n\r\n    const playAgain=()=>{\r\n        setIsCross(true)\r\n        setWinMessage(\"\")\r\n        tictacArray.fill(\"\")\r\n    }\r\n    const findWinner=()=>{\r\n        if(tictacArray[0]==tictacArray[1]&&tictacArray[0]==tictacArray[2] && tictacArray[0]!=\"\"){\r\n            setWinMessage(tictacArray[0]+\" has won\")\r\n        }\r\n        else if(tictacArray[3]== tictacArray[4] && tictacArray[3]== tictacArray[5] && tictacArray[3]!=\"\"){\r\n            setWinMessage(tictacArray[3]+\" has won\")\r\n        }\r\n        else if(tictacArray[6]== tictacArray[7] && tictacArray[6]== tictacArray[8] && tictacArray[6]!=\"\"){\r\n            setWinMessage(tictacArray[6]+\" has won\")\r\n        }\r\n        else if(tictacArray[0]== tictacArray[3] && tictacArray[0]== tictacArray[6] && tictacArray[0]){\r\n            setWinMessage(tictacArray[0]+\" has won\")\r\n        }\r\n        else if(tictacArray[1]== tictacArray[4] && tictacArray[1]== tictacArray[7] && tictacArray[1]){\r\n            setWinMessage(tictacArray[1]+\" has won\")\r\n        }\r\n        else if(tictacArray[2]== tictacArray[5] && tictacArray[2]== tictacArray[8] && tictacArray[2]){\r\n            setWinMessage(tictacArray[2]+\" has won\")\r\n        }\r\n        else if(tictacArray[0]== tictacArray[4] && tictacArray[0]== tictacArray[8] && tictacArray[0]){\r\n            setWinMessage(tictacArray[0]+\" has won\")\r\n        }\r\n        else if(tictacArray[2]== tictacArray[4] && tictacArray[2]== tictacArray[6] && tictacArray[2]){\r\n            setWinMessage(tictacArray[2]+\" has won\")\r\n        }   \r\n    }\r\n\r\n    const changeItem=(index)=>{\r\n        if(winMessage){\r\n            return toast(\"Game Has Already Got Over\", {type:\"success\"})\r\n        }\r\n        if(tictacArray[index]==\"\"){\r\n            tictacArray[index] = isCross ? \"cross\" : \"circle\"\r\n            setIsCross(!isCross)\r\n        }\r\n        else{\r\n            return(\"This Is Already Occupied\", {type:\"error\"})\r\n        }\r\n        findWinner()\r\n    }\r\n\r\n    return(\r\n        <Container className=\"p-5\">\r\n            <ToastContainer position=\"bottom-center\"></ToastContainer>\r\n            <Row>\r\n                <div className=\"logo\">Tic-Tac-Toe</div>\r\n                <Col md={6} className=\"offset-md-3\">\r\n\r\n                    {\r\n                        winMessage ? (\r\n                            <div>\r\n                            <h1 className=\"text-center\">\r\n                                {winMessage}\r\n                            </h1>\r\n                            <Button onClick={playAgain} className=\"button\">Play Again</Button>\r\n                            </div>\r\n                        ) : (\r\n                            <h1>\r\n                                {isCross?\"Player_1's Turn\":\"Player_2's Turn\"}\r\n                            </h1>\r\n                        )\r\n                    }\r\n\r\n                    <div className=\"grid\">\r\n                        {tictacArray.map((value,index)=>(\r\n                            <Card onClick={()=>changeItem(index)}>\r\n                                <CardBody className=\"box\">\r\n                                    <Icon choice={tictacArray[index]}/>\r\n                                </CardBody>\r\n                            </Card>\r\n                        ))}\r\n                    </div>\r\n\r\n\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\n\r\n\r\n\r\nReactDOM.render( <App /> , document.getElementById(\"root\"))"],"sourceRoot":""}